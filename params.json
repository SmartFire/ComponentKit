{"name":"ComponentKit","tagline":"An in-memory object database for entities composed by a set of components.","body":"# ComponentKit\r\n\r\nThis here kit is useful if you need to model something like this:\r\n\r\n\t------------------------------------------------------------------------\r\n\t|          | Position | Health | Flying | Fire Breathing | Combustible |\r\n\t------------------------------------------------------------------------\r\n\t| \"Player\" |    x     |   X    |        |                |      x      |\r\n\t| \"Dragon\" |    x     |   X    |   x    |       x        |             |\r\n\t------------------------------------------------------------------------\r\n\t     ^                             ^\r\n\t  Unique entities      composed of arbitrary behaviors.\r\n\r\n\r\n## Usage\r\n\r\nCreate an entity:\r\n\r\n```C#\r\nIEntityRecord dragon = \r\n    Entity.Create(\"A firebreathing dragon!\",\r\n        new Health()),\r\n        new FireBreathing()));\r\n```\r\n\r\nYou can also define entities to easily create them later:\r\n\r\n```C#\r\nEntity.Define(\"Dragon\",\r\n    typeof(Health));\r\n\r\nEntity.Define(\"Player\",\r\n    typeof(Health),\r\n    typeof(Combustible));\r\n```\r\n\r\nAnd then later:\r\n\r\n```C#\r\nIEntityRecord player =\r\n    Entity.CreateFromDefinition(\r\n        \"Player\", \"You!\");\r\n\r\nIEntityRecord dragon =\r\n    Entity.CreateFromDefinition(\r\n        \"Dragon\", \"A Firebreathing dragon!\",\r\n        new FireBreathing()));\r\n```\r\n\r\nWhen you want to manage and handle specific components separately, you can set triggers. Like this:\r\n\r\n```C#\r\nList<Combustible> combustibles = \r\n    new List<Combustible>();\r\n\r\nEntityRegistry.Current.SetTrigger(\r\n    component => component is Combustible,\r\n    (sender, eventArgs) => {\r\n        foreach (IComponent component in eventArgs.Components) {\r\n            Combustible combustible = component as Combustible;\r\n            \r\n            if (combustible != null) {\r\n                if (combustible.IsOutOfSync) {\r\n                    combustibles.Remove(combustible);\r\n                } else {\r\n                    combustibles.Add(combustible);\r\n                }\r\n            }\r\n        }\r\n    });\r\n```\r\n\r\nBut don't forget to commit the changes. Otherwise the triggers **will not** be run:\r\n\r\n```C#\r\nEntityRegistry.Current.Synchronize();\r\n```\r\n\r\n### Components\r\n\r\nThey come in 2 shapes:\r\n\r\n - **Component**: Basic component that can be attached to any entity. Can provide behavior or just data.\r\n - **DependencyComponent**: Like the Component, but can specify a dependence on other components.\r\n\r\nA very basic component could look like this:\r\n\r\n```C#\r\nclass Health : Component {\r\n    public Health() {\r\n        Amount = 100;\r\n    }\r\n\r\n    public bool IsDead {\r\n        get {\r\n            return Amount <= 0;\r\n        }\r\n    }\r\n\r\n    public int Amount { \r\n        get; \r\n        set; \r\n    }\r\n}\r\n```\r\n\r\nSome components need to interact with others, take this one for example:\r\n\r\n```C#\r\nclass Combustible : DependencyComponent {\r\n    [RequireComponent]\r\n    Health _health;\r\n\r\n    public bool IsBurning { \r\n        get; \r\n        private set; \r\n    }\r\n\r\n    public void Combust() {\r\n        IsBurning = true;\r\n    }\r\n\r\n    public void Extinguish() {\r\n        IsBurning = false;\r\n    }\r\n\r\n    public void Burn() {\r\n        _health.Amount -= 10;\r\n    }\r\n}\r\n```\r\n\r\nCommon for all components is that they have to be handled by you. The firebreathing dragon does not breathe fire until it is told to. Usually this is handled through a trigger or similar system.\r\n\r\n```C#\r\nclass FireBreathing : DependencyComponent {\r\n    public void Breathe(IEntityRecord target) {\r\n        if (target.HasComponent<Combustible>()) {\r\n            target.GetComponent<Combustible>().Combust();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### More\r\n\r\nWhen you're ready to make stuff happen, you go like this:\r\n\r\n```C#\r\ndragon.GetComponent<FireBreathing>()\r\n    .Breathe(player);\r\n```\r\n\r\nYou could even put some real action in:\r\n\r\n```C#\r\nRandom r = new Random();\r\n\r\nfor (int turn = 0; turn < 10; turn++) {\r\n    foreach (Combustible combustible in combustibles) {\r\n        if (combustible.IsBurning) {\r\n            combustible.Burn();\r\n        }\r\n    }\r\n\r\n    Combustible fire = player.GetComponent<Combustible>();\r\n    Health condition = player.GetComponent<Health>();\r\n\r\n    if (fire.IsBurning) {\r\n        // There's a 10% chance that the player figures out how to extinguish himself!\r\n        bool playerStoppedDroppedAndRolled =\r\n            r.Next(0, 100) <= 10;\r\n\r\n        if (playerStoppedDroppedAndRolled) {\r\n            fire.Extinguish();\r\n        }\r\n    }\r\n\r\n    if (condition.IsDead) {\r\n    \t// Unfortunately for the player, he did not figure it out in time.\r\n        break;\r\n    }\r\n}\r\n```\r\n\r\n#### Examples\r\n\r\nFor more examples of usage, check out these repositories:\r\n\r\n - [jhauberg/Fruitless](https://github.com/jhauberg/Fruitless)\r\n - [ambient92/Calcifer](https://github.com/ambient92/Calcifer)\r\n\r\n## License\r\n\r\n\tCopyright 2014 Jacob Hauberg Hansen.\r\n\r\n\tPermission is hereby granted, free of charge, to any person obtaining a copy of\r\n\tthis software and associated documentation files (the \"Software\"), to deal in\r\n\tthe Software without restriction, including without limitation the rights to\r\n\tuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\n\tof the Software, and to permit persons to whom the Software is furnished to do\r\n\tso, subject to the following conditions:\r\n\r\n\tThe above copyright notice and this permission notice shall be included in all\r\n\tcopies or substantial portions of the Software.\r\n\r\n\tThis part is in all uppercase. \r\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n\tSOFTWARE.\r\n\r\n\thttp://en.wikipedia.org/wiki/MIT_License","google":"UA-54716694-1","note":"Don't delete this file! It's used internally to help with page regeneration."}